[Unit]
Description=Creates mongodb backups.
After=vulcan.service
Requires=docker.service
Wants=mongolizer-sidekick@%i.service

[Service]
Environment="DOCKER_APP_VERSION=latest"
TimeoutStartSec=0
KillMode=none

ExecStartPre=-/bin/bash -c '/usr/bin/docker kill "$(docker ps -q --filter=name=^/%p-%i_)" > /dev/null 2>&1'
ExecStartPre=-/bin/bash -c '/usr/bin/docker rm "$(docker ps -q --filter=name=^/%p-%i_)" > /dev/null 2>&1'
ExecStartPre=/bin/bash -c 'docker history coco/mongolizer:$DOCKER_APP_VERSION > /dev/null 2>&1 || docker pull coco/mongolizer:$DOCKER_APP_VERSION'

ExecStart=/bin/sh -c '\
  export MONGODB=$(for x in $(etcdctl ls /ft/config/mongodb);do echo -n $(etcdctl get $x/host):$(etcdctl get $x/port)"," ; done | sed s/.$//); \
  export S3_DOMAIN=s3-eu-west-1.amazonaws.com; \
  export S3_BUCKET=com.ft.coco-mongo-backup.prod; \
  export S3_DIR=mongolizer-$(/usr/bin/etcdctl get /ft/config/environment_tag); \
  export AWS_ACCESS_KEY_ID=$(/usr/bin/etcdctl get /ft/_credentials/aws/aws_access_key_id);\
  export AWS_SECRET_ACCESS_KEY=$(/usr/bin/etcdctl get /ft/_credentials/aws/aws_secret_access_key); \
  /usr/bin/docker run --rm --name %p-%i_$(uuidgen) -p 8080 -p 8081 \
  --env "MONGODB==$MONGODB" \
  --env "S3_DOMAIN=$S3_DOMAIN" \
  --env "S3_BUCKET=$S3_BUCKET" \
  --env "S3_DIR=$S3_DIR" \
  --env "AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" \
  --env "AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" \
  --env "MONGODB_COLLECTIONS=upp-store/content,upp-store/lists,upp-store/internalcomponents,upp-store/notifications,upp-store/organizations" \
  --env "CRON=1 0 * * *" \
  --env "RUN=false" \
  coco/mongolizer:$DOCKER_APP_VERSION'

ExecStop=-/bin/bash -c 'docker stop -t 3 "$(docker ps -q --filter=name=^/%p-%i_)"'
Restart=on-failure
RestartSec=60

[Install]
# this sets user-level
WantedBy=multi-user.target

[X-Fleet]
Conflicts=%p@*.service
