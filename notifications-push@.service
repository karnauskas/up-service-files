[Unit]
Description=notifications-push service
After=docker.service
Requires=docker.service
Wants=notifications-push-sidekick@%i.service

[Service]
Environment="DOCKER_APP_VERSION=latest"
TimeoutStartSec=0
# Change killmode from "control-group" to "none" to let Docker remove work correctly.
KillMode=none
ExecStartPre=-/bin/bash -c '/usr/bin/docker kill %p-%i > /dev/null 2>&1'
ExecStartPre=-/bin/bash -c '/usr/bin/docker rm %p-%i > /dev/null 2>&1'
ExecStartPre=/bin/bash -c 'docker history coco/notifications-push:$DOCKER_APP_VERSION > /dev/null 2>&1 || docker pull coco/notifications-push:$DOCKER_APP_VERSION'

ExecStart=/bin/sh -c '\
	export PORT=8080; \
	export NOTIFICATIONS_PUSH_PORT=8548; \
  export QUEUE_PROXY_ADDRS=$(/usr/bin/etcdctl get /ft/config/kafka-bridge/ucs_queue_proxy_addrs); \
  export GROUP_ID=$(/usr/bin/etcdctl get /ft/config/environment_tag)"-notifications-push-%i"; \
  export AUTHORIZATION_KEY=$(/usr/bin/etcdctl get /ft/_credentials/kafka-bridge/authorization_key); \
	/usr/bin/docker run --rm --name %p-%i -p $NOTIFICATIONS_PUSH_PORT:8080 --env "QUEUE_PROXY_ADDRS=$QUEUE_PROXY_ADDRS" --env "GROUP_ID=$GROUP_ID" --env "AUTHORIZATION_KEY=$AUTHORIZATION_KEY" --env "TOPIC=CmsPublicationEvents" --env "API_BASE_URL=http://api.ft.com" coco/notifications-push:$DOCKER_APP_VERSION;'
ExecStop=/usr/bin/docker stop -t 3 %p-%i
Restart=on-failure
RestartSec=60

[X-Fleet]
Conflicts=notifications-push@*.service
MachineOf=varnish@%i.service
